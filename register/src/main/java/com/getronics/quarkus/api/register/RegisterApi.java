/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.getronics.quarkus.api.register;

import com.getronics.quarkus.api.register.model.RegisterRequest;
import com.getronics.quarkus.api.register.model.RegisterResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-05-19T12:09:00.549+02:00[Europe/Madrid]")
@Validated
@Api(value = "register", description = "the register API")
public interface RegisterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /register : Create a RegisterRequest
     * Creates a new instance of a &#x60;RegisterRequest&#x60;.
     *
     * @param registerRequest A new &#x60;RegisterRequest&#x60; to be created. (required)
     * @return Successful response. (status code 201)
     */
    @ApiOperation(value = "Create a RegisterRequest", nickname = "createRegisterRequest", notes = "Creates a new instance of a `RegisterRequest`.", response = RegisterResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful response.", response = RegisterResponse.class) })
    @PostMapping(
        value = "/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RegisterResponse> createRegisterRequest(@ApiParam(value = "A new `RegisterRequest` to be created." ,required=true )  @Valid @RequestBody RegisterRequest registerRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"some text\", \"truststore\" : \"<FILE>\", \"keystore\" : \"<FILE>\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /register/{id} : Get a RegisterRequest
     * Gets the details of a single instance of a &#x60;RegisterRequest&#x60;.
     *
     * @param id  (required)
     * @return Successful response - returns a single &#x60;RegisterResponse&#x60;. (status code 200)
     */
    @ApiOperation(value = "Get a RegisterRequest", nickname = "getRegisterRequest", notes = "Gets the details of a single instance of a `RegisterRequest`.", response = RegisterResponse.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful response - returns a single `RegisterResponse`.", response = RegisterResponse.class) })
    @GetMapping(
        value = "/register/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<RegisterResponse> getRegisterRequest(@ApiParam(value = "",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : \"some text\", \"truststore\" : \"<FILE>\", \"keystore\" : \"<FILE>\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
